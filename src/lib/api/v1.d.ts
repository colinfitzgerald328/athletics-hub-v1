/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Root */
    get: operations["read_root__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/_ah/warmup": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Warmup
     * @description Served stub function returning no content.
     *
     *
     *     Returns:
     *         An empty string, an HTTP code 200, and an empty object.
     */
    get: operations["warmup__ah_warmup_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/athletes/{athlete_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Athlete By Id */
    get: operations["get_athlete_by_id_athletes__athlete_id__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/athletes/page/{page}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Athletes List */
    get: operations["get_athletes_list_athletes_page__page__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/athlete/random": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Random Athlete */
    get: operations["get_random_athlete_athlete_random_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/athlete/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Search For Athlete */
    get: operations["search_for_athlete_athlete_search_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/letsrun/daily_summary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Letsrun Daily Summary */
    get: operations["get_letsrun_daily_summary_letsrun_daily_summary_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/letsrun/daily_summary/create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Post Letsrun Daily Summary */
    post: operations["post_letsrun_daily_summary_letsrun_daily_summary_create_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/account/new": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create Account */
    post: operations["create_account_account_new_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/link/scrape": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Link Scrape */
    post: operations["link_scrape_link_scrape_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login */
    post: operations["login_login_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Logout */
    post: operations["logout_logout_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/context": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get Context */
    post: operations["get_context_context_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/example": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Protected Route */
    get: operations["protected_route_example_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** AccountCreate */
    AccountCreate: {
      /** Username */
      username: string;
      /** Password */
      password: string;
    };
    /** AthleteResult */
    AthleteResult: {
      /** Date */
      date: string;
      /** Competition */
      competition: string;
      /** Venue */
      venue: string;
      /** Indoor */
      indoor: boolean | null;
      /** Discipline Code */
      discipline_code: string | null;
      /** Discipline Name Url Slug */
      discipline_name_url_slug: string | null;
      /** Type Name Url Slug */
      type_name_url_slug: string | null;
      /** Discipline */
      discipline: string;
      /** Country */
      country: string;
      /** Category */
      category: string;
      /** Race */
      race: string;
      /** Place */
      place: string;
      /** Mark */
      mark: string;
      /** Wind */
      wind: string | null;
      /** Not Legal */
      not_legal: boolean | null;
      /** Result Score */
      result_score: number | null;
      /** Remark */
      remark: string | null;
      /** Timestamp */
      timestamp: number;
    };
    /** Body_login_login_post */
    Body_login_login_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** CloseMatch */
    CloseMatch: {
      /** Athlete Id */
      athlete_id: number;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /** Primary Disciplines */
      primary_disciplines: string;
      /** Hq Images */
      hq_images: string[] | null;
    };
    /** GetContextPayload */
    GetContextPayload: {
      /** Current Question */
      current_question: string;
      /** Chat History */
      chat_history: string[];
    };
    /** GetPageContentPayload */
    GetPageContentPayload: {
      /** Url */
      url: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** LetsrunSummaryForDay */
    LetsrunSummaryForDay: {
      /** Id */
      id: number;
      /** Summary Text */
      summary_text: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /** PydanticAthlete */
    PydanticAthlete: {
      /** Id */
      id: number;
      /** Athlete Id */
      athlete_id: number;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /** Date Of Birth */
      date_of_birth: string | null;
      /** Country */
      country: string;
      /** Url Slug */
      url_slug: string;
      /** Primary Disciplines */
      primary_disciplines: string;
      /** Accomplishments */
      accomplishments: string[] | null;
      /** Personal Bests */
      personal_bests: unknown[] | null;
      /** Gender */
      gender: string;
      /** Wikipedia Url */
      wikipedia_url: string | null;
      /** Social Urls */
      social_urls: Record<string, never> | unknown[] | null;
      /** Nickname */
      nickname: string | null;
      /** Hq Images */
      hq_images: string[] | null;
      /** Markdown Summary */
      markdown_summary: string | null;
      /** Avg Result Score */
      avg_result_score: number | null;
      /** Primary Event */
      primary_event: string | null;
    };
    /** QueriedAthlete */
    QueriedAthlete: {
      athlete: components["schemas"]["PydanticAthlete"];
      /** Results */
      results: components["schemas"]["AthleteResult"][];
      /** Top Competitors */
      top_competitors: components["schemas"]["TopCompetitor"][];
      /** Similar Athletes */
      similar_athletes: components["schemas"]["CloseMatch"][] | null;
    };
    /** TopCompetitor */
    TopCompetitor: {
      /** Athlete Id */
      athlete_id: number;
      /** Primary Disciplines */
      primary_disciplines: string;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /** Markdown Summary */
      markdown_summary: string | null;
      /** Hq Images */
      hq_images: string[] | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VectorSearchResult */
    VectorSearchResult: {
      /** Athlete Id */
      athlete_id: number;
      /** Hq Images */
      hq_images: string[] | null;
      /** Full Name */
      full_name: string;
      /** Primary Disciplines */
      primary_disciplines: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  read_root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  warmup__ah_warmup_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  get_athlete_by_id_athletes__athlete_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        athlete_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QueriedAthlete"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_athletes_list_athletes_page__page__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        page: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_random_athlete_athlete_random_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  search_for_athlete_athlete_search_get: {
    parameters: {
      query: {
        search_query: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["VectorSearchResult"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_letsrun_daily_summary_letsrun_daily_summary_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LetsrunSummaryForDay"];
        };
      };
    };
  };
  post_letsrun_daily_summary_letsrun_daily_summary_create_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  create_account_account_new_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  link_scrape_link_scrape_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetPageContentPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  login_login_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_login_login_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  logout_logout_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  get_context_context_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetContextPayload"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  protected_route_example_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: {
        access_token?: string;
      };
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
